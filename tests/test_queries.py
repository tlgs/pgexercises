import datetime
from decimal import Decimal

import psycopg
import pytest


datetime_iso = datetime.datetime.fromisoformat
date_iso = datetime.date.fromisoformat

test_parameters = [
    pytest.param(
        "1-basic/01-Retrieve-everything-from-a-table.sql",
        ["facid", "name", "membercost", "guestcost", "initialoutlay", "monthlymaintenance"],
        [
            (0, b"Tennis Court 1", 5, 25, 10000, 200),
            (1, b"Tennis Court 2", 5, 25, 8000, 200),
            (2, b"Badminton Court", 0, 15.5, 4000, 50),
            (3, b"Table Tennis", 0, 5, 320, 10),
            (4, b"Massage Room 1", 35, 80, 4000, 3000),
            (5, b"Massage Room 2", 35, 80, 4000, 3000),
            (6, b"Squash Court", 3.5, 17.5, 5000, 80),
            (7, b"Snooker Table", 0, 5, 450, 15),
            (8, b"Pool Table", 0, 5, 400, 15),
        ],
    ),
    pytest.param(
        "1-basic/02-Retrieve-specific-columns-from-a-table.sql",
        ["name", "membercost"],
        [
            (b"Tennis Court 1", 5),
            (b"Tennis Court 2", 5),
            (b"Badminton Court", 0),
            (b"Table Tennis", 0),
            (b"Massage Room 1", 35),
            (b"Massage Room 2", 35),
            (b"Squash Court", 3.5),
            (b"Snooker Table", 0),
            (b"Pool Table", 0),
        ],
    ),
    pytest.param(
        "1-basic/03-Control-which-rows-are-retrieved.sql",
        ["facid", "name", "membercost", "guestcost", "initialoutlay", "monthlymaintenance"],
        [
            (0, b"Tennis Court 1", 5, 25, 10000, 200),
            (1, b"Tennis Court 2", 5, 25, 8000, 200),
            (4, b"Massage Room 1", 35, 80, 4000, 3000),
            (5, b"Massage Room 2", 35, 80, 4000, 3000),
            (6, b"Squash Court", 3.5, 17.5, 5000, 80),
        ],
    ),
    pytest.param(
        "1-basic/04-Control-which-rows-are-retrieved-part-2.sql",
        ["facid", "name", "membercost", "monthlymaintenance"],
        [(4, b"Massage Room 1", 35, 3000), (5, b"Massage Room 2", 35, 3000)],
    ),
    pytest.param(
        "1-basic/05-Basic-string-searches.sql",
        ["facid", "name", "membercost", "guestcost", "initialoutlay", "monthlymaintenance"],
        [
            (0, b"Tennis Court 1", 5, 25, 10000, 200),
            (1, b"Tennis Court 2", 5, 25, 8000, 200),
            (3, b"Table Tennis", 0, 5, 320, 10),
        ],
    ),
    pytest.param(
        "1-basic/06-Matching-against-multiple-possible-values.sql",
        ["facid", "name", "membercost", "guestcost", "initialoutlay", "monthlymaintenance"],
        [(1, b"Tennis Court 2", 5, 25, 8000, 200), (5, b"Massage Room 2", 35, 80, 4000, 3000)],
    ),
    pytest.param(
        "1-basic/07-Classify-results-into-buckets.sql",
        ["name", "cost"],
        [
            (b"Tennis Court 1", b"expensive"),
            (b"Tennis Court 2", b"expensive"),
            (b"Badminton Court", b"cheap"),
            (b"Table Tennis", b"cheap"),
            (b"Massage Room 1", b"expensive"),
            (b"Massage Room 2", b"expensive"),
            (b"Squash Court", b"cheap"),
            (b"Snooker Table", b"cheap"),
            (b"Pool Table", b"cheap"),
        ],
    ),
    pytest.param(
        "1-basic/08-Working-with-dates.sql",
        ["memid", "surname", "firstname", "joindate"],
        [
            (24, b"Sarwin", b"Ramnaresh", datetime_iso("2012-09-01 08:44:42")),
            (26, b"Jones", b"Douglas", datetime_iso("2012-09-02 18:43:05")),
            (27, b"Rumney", b"Henrietta", datetime_iso("2012-09-05 08:42:35")),
            (28, b"Farrell", b"David", datetime_iso("2012-09-15 08:22:05")),
            (29, b"Worthington-Smyth", b"Henry", datetime_iso("2012-09-17 12:27:15")),
            (30, b"Purview", b"Millicent", datetime_iso("2012-09-18 19:04:01")),
            (33, b"Tupperware", b"Hyacinth", datetime_iso("2012-09-18 19:32:05")),
            (35, b"Hunt", b"John", datetime_iso("2012-09-19 11:32:45")),
            (36, b"Crumpet", b"Erica", datetime_iso("2012-09-22 08:36:38")),
            (37, b"Smith", b"Darren", datetime_iso("2012-09-26 18:08:45")),
        ],
    ),
    pytest.param(
        "1-basic/09-Removing-duplicates-and-ordering-results.sql",
        ["surname"],
        [
            (b"Bader",),
            (b"Baker",),
            (b"Boothe",),
            (b"Butters",),
            (b"Coplin",),
            (b"Crumpet",),
            (b"Dare",),
            (b"Farrell",),
            (b"GUEST",),
            (b"Genting",),
        ],
    ),
    pytest.param(
        "1-basic/10-Combining-results-from-multiple-queries.sql",
        ["surname"],
        [
            (b"Hunt",),
            (b"Farrell",),
            (b"Tennis Court 2",),
            (b"Table Tennis",),
            (b"Dare",),
            (b"Rownam",),
            (b"GUEST",),
            (b"Badminton Court",),
            (b"Smith",),
            (b"Tupperware",),
            (b"Owen",),
            (b"Worthington-Smyth",),
            (b"Butters",),
            (b"Rumney",),
            (b"Tracy",),
            (b"Crumpet",),
            (b"Purview",),
            (b"Massage Room 2",),
            (b"Sarwin",),
            (b"Baker",),
            (b"Pool Table",),
            (b"Snooker Table",),
            (b"Jones",),
            (b"Coplin",),
            (b"Mackenzie",),
            (b"Boothe",),
            (b"Joplette",),
            (b"Stibbons",),
            (b"Squash Court",),
            (b"Tennis Court 1",),
            (b"Pinker",),
            (b"Genting",),
            (b"Bader",),
            (b"Massage Room 1",),
        ],
    ),
    pytest.param(
        "1-basic/11-Simple-aggregation.sql",
        ["latest"],
        [(datetime_iso("2012-09-26 18:08:45"),)],
    ),
    pytest.param(
        "1-basic/12-More-aggregation.sql",
        ["firstname", "surname", "joindate"],
        [(b"Darren", b"Smith", datetime_iso("2012-09-26 18:08:45"))],
    ),
    pytest.param(
        "2-joins-and-subqueries/1-Retrieve-the-start-times-of-members-bookings.sql",
        ["starttime"],
        [
            (datetime_iso("2012-09-18 09:00:00"),),
            (datetime_iso("2012-09-18 17:30:00"),),
            (datetime_iso("2012-09-18 13:30:00"),),
            (datetime_iso("2012-09-18 20:00:00"),),
            (datetime_iso("2012-09-19 09:30:00"),),
            (datetime_iso("2012-09-19 15:00:00"),),
            (datetime_iso("2012-09-19 12:00:00"),),
            (datetime_iso("2012-09-20 15:30:00"),),
            (datetime_iso("2012-09-20 11:30:00"),),
            (datetime_iso("2012-09-20 14:00:00"),),
            (datetime_iso("2012-09-21 10:30:00"),),
            (datetime_iso("2012-09-21 14:00:00"),),
            (datetime_iso("2012-09-22 08:30:00"),),
            (datetime_iso("2012-09-22 17:00:00"),),
            (datetime_iso("2012-09-23 08:30:00"),),
            (datetime_iso("2012-09-23 17:30:00"),),
            (datetime_iso("2012-09-23 19:00:00"),),
            (datetime_iso("2012-09-24 08:00:00"),),
            (datetime_iso("2012-09-24 16:30:00"),),
            (datetime_iso("2012-09-24 12:30:00"),),
            (datetime_iso("2012-09-25 15:30:00"),),
            (datetime_iso("2012-09-25 17:00:00"),),
            (datetime_iso("2012-09-26 13:00:00"),),
            (datetime_iso("2012-09-26 17:00:00"),),
            (datetime_iso("2012-09-27 08:00:00"),),
            (datetime_iso("2012-09-28 11:30:00"),),
            (datetime_iso("2012-09-28 09:30:00"),),
            (datetime_iso("2012-09-28 13:00:00"),),
            (datetime_iso("2012-09-29 16:00:00"),),
            (datetime_iso("2012-09-29 10:30:00"),),
            (datetime_iso("2012-09-29 13:30:00"),),
            (datetime_iso("2012-09-29 14:30:00"),),
            (datetime_iso("2012-09-29 17:30:00"),),
            (datetime_iso("2012-09-30 14:30:00"),),
        ],
    ),
    pytest.param(
        "2-joins-and-subqueries/2-Work-out-the-start-times-of-bookings-for-tennis-courts.sql",
        ["start", "name"],
        [
            (datetime_iso("2012-09-21 08:00:00"), b"Tennis Court 1"),
            (datetime_iso("2012-09-21 08:00:00"), b"Tennis Court 2"),
            (datetime_iso("2012-09-21 09:30:00"), b"Tennis Court 1"),
            (datetime_iso("2012-09-21 10:00:00"), b"Tennis Court 2"),
            (datetime_iso("2012-09-21 11:30:00"), b"Tennis Court 2"),
            (datetime_iso("2012-09-21 12:00:00"), b"Tennis Court 1"),
            (datetime_iso("2012-09-21 13:30:00"), b"Tennis Court 1"),
            (datetime_iso("2012-09-21 14:00:00"), b"Tennis Court 2"),
            (datetime_iso("2012-09-21 15:30:00"), b"Tennis Court 1"),
            (datetime_iso("2012-09-21 16:00:00"), b"Tennis Court 2"),
            (datetime_iso("2012-09-21 17:00:00"), b"Tennis Court 1"),
            (datetime_iso("2012-09-21 18:00:00"), b"Tennis Court 2"),
        ],
    ),
    pytest.param(
        "2-joins-and-subqueries/3-Produce-a-list-of-all-members-who-have-recommended-another-member.sql",
        ["firstname", "surname"],
        [
            (b"Florence", b"Bader"),
            (b"Timothy", b"Baker"),
            (b"Gerald", b"Butters"),
            (b"Jemima", b"Farrell"),
            (b"Matthew", b"Genting"),
            (b"David", b"Jones"),
            (b"Janice", b"Joplette"),
            (b"Millicent", b"Purview"),
            (b"Tim", b"Rownam"),
            (b"Darren", b"Smith"),
            (b"Tracy", b"Smith"),
            (b"Ponder", b"Stibbons"),
            (b"Burton", b"Tracy"),
        ],
    ),
    pytest.param(
        "2-joins-and-subqueries/4-Produce-a-list-of-all-members-along-with-their-recommender.sql",
        ["memfname", "memsname", "recfname", "recsname"],
        [
            (b"Florence", b"Bader", b"Ponder", b"Stibbons"),
            (b"Anne", b"Baker", b"Ponder", b"Stibbons"),
            (b"Timothy", b"Baker", b"Jemima", b"Farrell"),
            (b"Tim", b"Boothe", b"Tim", b"Rownam"),
            (b"Gerald", b"Butters", b"Darren", b"Smith"),
            (b"Joan", b"Coplin", b"Timothy", b"Baker"),
            (b"Erica", b"Crumpet", b"Tracy", b"Smith"),
            (b"Nancy", b"Dare", b"Janice", b"Joplette"),
            (b"David", b"Farrell", None, None),
            (b"Jemima", b"Farrell", None, None),
            (b"GUEST", b"GUEST", None, None),
            (b"Matthew", b"Genting", b"Gerald", b"Butters"),
            (b"John", b"Hunt", b"Millicent", b"Purview"),
            (b"David", b"Jones", b"Janice", b"Joplette"),
            (b"Douglas", b"Jones", b"David", b"Jones"),
            (b"Janice", b"Joplette", b"Darren", b"Smith"),
            (b"Anna", b"Mackenzie", b"Darren", b"Smith"),
            (b"Charles", b"Owen", b"Darren", b"Smith"),
            (b"David", b"Pinker", b"Jemima", b"Farrell"),
            (b"Millicent", b"Purview", b"Tracy", b"Smith"),
            (b"Tim", b"Rownam", None, None),
            (b"Henrietta", b"Rumney", b"Matthew", b"Genting"),
            (b"Ramnaresh", b"Sarwin", b"Florence", b"Bader"),
            (b"Darren", b"Smith", None, None),
            (b"Darren", b"Smith", None, None),
            (b"Jack", b"Smith", b"Darren", b"Smith"),
            (b"Tracy", b"Smith", None, None),
            (b"Ponder", b"Stibbons", b"Burton", b"Tracy"),
            (b"Burton", b"Tracy", None, None),
            (b"Hyacinth", b"Tupperware", None, None),
            (b"Henry", b"Worthington-Smyth", b"Tracy", b"Smith"),
        ],
    ),
    pytest.param(
        "2-joins-and-subqueries/5-Produce-a-list-of-all-members-who-have-used-a-tennis-court.sql",
        ["member", "facility"],
        [
            (b"Anne Baker", b"Tennis Court 1"),
            (b"Anne Baker", b"Tennis Court 2"),
            (b"Burton Tracy", b"Tennis Court 1"),
            (b"Burton Tracy", b"Tennis Court 2"),
            (b"Charles Owen", b"Tennis Court 1"),
            (b"Charles Owen", b"Tennis Court 2"),
            (b"Darren Smith", b"Tennis Court 2"),
            (b"David Farrell", b"Tennis Court 1"),
            (b"David Farrell", b"Tennis Court 2"),
            (b"David Jones", b"Tennis Court 1"),
            (b"David Jones", b"Tennis Court 2"),
            (b"David Pinker", b"Tennis Court 1"),
            (b"Douglas Jones", b"Tennis Court 1"),
            (b"Erica Crumpet", b"Tennis Court 1"),
            (b"Florence Bader", b"Tennis Court 1"),
            (b"Florence Bader", b"Tennis Court 2"),
            (b"GUEST GUEST", b"Tennis Court 1"),
            (b"GUEST GUEST", b"Tennis Court 2"),
            (b"Gerald Butters", b"Tennis Court 1"),
            (b"Gerald Butters", b"Tennis Court 2"),
            (b"Henrietta Rumney", b"Tennis Court 2"),
            (b"Jack Smith", b"Tennis Court 1"),
            (b"Jack Smith", b"Tennis Court 2"),
            (b"Janice Joplette", b"Tennis Court 1"),
            (b"Janice Joplette", b"Tennis Court 2"),
            (b"Jemima Farrell", b"Tennis Court 1"),
            (b"Jemima Farrell", b"Tennis Court 2"),
            (b"Joan Coplin", b"Tennis Court 1"),
            (b"John Hunt", b"Tennis Court 1"),
            (b"John Hunt", b"Tennis Court 2"),
            (b"Matthew Genting", b"Tennis Court 1"),
            (b"Millicent Purview", b"Tennis Court 2"),
            (b"Nancy Dare", b"Tennis Court 1"),
            (b"Nancy Dare", b"Tennis Court 2"),
            (b"Ponder Stibbons", b"Tennis Court 1"),
            (b"Ponder Stibbons", b"Tennis Court 2"),
            (b"Ramnaresh Sarwin", b"Tennis Court 1"),
            (b"Ramnaresh Sarwin", b"Tennis Court 2"),
            (b"Tim Boothe", b"Tennis Court 1"),
            (b"Tim Boothe", b"Tennis Court 2"),
            (b"Tim Rownam", b"Tennis Court 1"),
            (b"Tim Rownam", b"Tennis Court 2"),
            (b"Timothy Baker", b"Tennis Court 1"),
            (b"Timothy Baker", b"Tennis Court 2"),
            (b"Tracy Smith", b"Tennis Court 1"),
            (b"Tracy Smith", b"Tennis Court 2"),
        ],
    ),
    pytest.param(
        "2-joins-and-subqueries/6-Produce-a-list-of-costly-bookings.sql",
        ["member", "facility", "cost"],
        [
            (b"GUEST GUEST", b"Massage Room 2", 320),
            (b"GUEST GUEST", b"Massage Room 1", 160),
            (b"GUEST GUEST", b"Massage Room 1", 160),
            (b"GUEST GUEST", b"Massage Room 1", 160),
            (b"GUEST GUEST", b"Tennis Court 2", 150),
            (b"Jemima Farrell", b"Massage Room 1", 140),
            (b"GUEST GUEST", b"Tennis Court 1", 75),
            (b"GUEST GUEST", b"Tennis Court 2", 75),
            (b"GUEST GUEST", b"Tennis Court 1", 75),
            (b"Matthew Genting", b"Massage Room 1", 70),
            (b"Florence Bader", b"Massage Room 2", 70),
            (b"GUEST GUEST", b"Squash Court", 70),
            (b"Jemima Farrell", b"Massage Room 1", 70),
            (b"Ponder Stibbons", b"Massage Room 1", 70),
            (b"Burton Tracy", b"Massage Room 1", 70),
            (b"Jack Smith", b"Massage Room 1", 70),
            (b"GUEST GUEST", b"Squash Court", 35),
            (b"GUEST GUEST", b"Squash Court", 35),
        ],
    ),
    pytest.param(
        "2-joins-and-subqueries/7-Produce-a-list-of-all-members-along-with-their-recommender-using-no-joins.sql",
        ["member", "recommender"],
        [
            (b"Anna Mackenzie", b"Darren Smith"),
            (b"Anne Baker", b"Ponder Stibbons"),
            (b"Burton Tracy", None),
            (b"Charles Owen", b"Darren Smith"),
            (b"Darren Smith", None),
            (b"David Farrell", None),
            (b"David Jones", b"Janice Joplette"),
            (b"David Pinker", b"Jemima Farrell"),
            (b"Douglas Jones", b"David Jones"),
            (b"Erica Crumpet", b"Tracy Smith"),
            (b"Florence Bader", b"Ponder Stibbons"),
            (b"GUEST GUEST", None),
            (b"Gerald Butters", b"Darren Smith"),
            (b"Henrietta Rumney", b"Matthew Genting"),
            (b"Henry Worthington-Smyth", b"Tracy Smith"),
            (b"Hyacinth Tupperware", None),
            (b"Jack Smith", b"Darren Smith"),
            (b"Janice Joplette", b"Darren Smith"),
            (b"Jemima Farrell", None),
            (b"Joan Coplin", b"Timothy Baker"),
            (b"John Hunt", b"Millicent Purview"),
            (b"Matthew Genting", b"Gerald Butters"),
            (b"Millicent Purview", b"Tracy Smith"),
            (b"Nancy Dare", b"Janice Joplette"),
            (b"Ponder Stibbons", b"Burton Tracy"),
            (b"Ramnaresh Sarwin", b"Florence Bader"),
            (b"Tim Boothe", b"Tim Rownam"),
            (b"Tim Rownam", None),
            (b"Timothy Baker", b"Jemima Farrell"),
            (b"Tracy Smith", None),
        ],
    ),
    pytest.param(
        "2-joins-and-subqueries/8-Produce-a-list-of-costly-bookings-using-a-subquery.sql",
        ["member", "facility", "cost"],
        [
            (b"GUEST GUEST", b"Massage Room 2", 320),
            (b"GUEST GUEST", b"Massage Room 1", 160),
            (b"GUEST GUEST", b"Massage Room 1", 160),
            (b"GUEST GUEST", b"Massage Room 1", 160),
            (b"GUEST GUEST", b"Tennis Court 2", 150),
            (b"Jemima Farrell", b"Massage Room 1", 140),
            (b"GUEST GUEST", b"Tennis Court 1", 75),
            (b"GUEST GUEST", b"Tennis Court 2", 75),
            (b"GUEST GUEST", b"Tennis Court 1", 75),
            (b"Matthew Genting", b"Massage Room 1", 70),
            (b"Florence Bader", b"Massage Room 2", 70),
            (b"GUEST GUEST", b"Squash Court", 70),
            (b"Jemima Farrell", b"Massage Room 1", 70),
            (b"Ponder Stibbons", b"Massage Room 1", 70),
            (b"Burton Tracy", b"Massage Room 1", 70),
            (b"Jack Smith", b"Massage Room 1", 70),
            (b"GUEST GUEST", b"Squash Court", 35),
            (b"GUEST GUEST", b"Squash Court", 35),
        ],
    ),
    pytest.param(
        "4-aggregates/01-Count-the-number-of-facilities.sql",
        ["count"],
        [(9,)],
    ),
    pytest.param(
        "4-aggregates/02-Count-the-number-of-expensive-facilities.sql",
        ["count"],
        [(6,)],
    ),
    pytest.param(
        "4-aggregates/03-Count-the-number-of-recommendations-each-member-makes.sql",
        ["recommendedby", "count"],
        [(1, 5), (2, 3), (3, 1), (4, 2), (5, 1), (6, 1), (9, 2), (11, 1), (13, 2), (15, 1), (16, 1), (20, 1), (30, 1)],
    ),
    pytest.param(
        "4-aggregates/04-List-the-total-slots-booked-per-facility.sql",
        ["facid", "Total Slots"],
        [(0, 1320), (1, 1278), (2, 1209), (3, 830), (4, 1404), (5, 228), (6, 1104), (7, 908), (8, 911)],
    ),
    pytest.param(
        "4-aggregates/05-List-the-total-slots-booked-per-facility-in-a-given-month.sql",
        ["facid", "Total Slots"],
        [(5, 122), (3, 422), (7, 426), (8, 471), (6, 540), (2, 570), (1, 588), (0, 591), (4, 648)],
    ),
    pytest.param(
        "4-aggregates/06-List-the-total-slots-booked-per-facility-per-month.sql",
        ["facid", "month", "Total Slots"],
        [
            (0, 7, 270),
            (0, 8, 459),
            (0, 9, 591),
            (1, 7, 207),
            (1, 8, 483),
            (1, 9, 588),
            (2, 7, 180),
            (2, 8, 459),
            (2, 9, 570),
            (3, 7, 104),
            (3, 8, 304),
            (3, 9, 422),
            (4, 7, 264),
            (4, 8, 492),
            (4, 9, 648),
            (5, 7, 24),
            (5, 8, 82),
            (5, 9, 122),
            (6, 7, 164),
            (6, 8, 400),
            (6, 9, 540),
            (7, 7, 156),
            (7, 8, 326),
            (7, 9, 426),
            (8, 7, 117),
            (8, 8, 322),
            (8, 9, 471),
        ],
    ),
    pytest.param(
        "4-aggregates/07-Find-the-count-of-members-who-have-made-at-least-one-booking.sql",
        ["count"],
        [(30,)],
    ),
    pytest.param(
        "4-aggregates/08-List-facilities-with-more-than-1000-slots-booked.sql",
        ["facid", "Total Slots"],
        [(0, 1320), (1, 1278), (2, 1209), (4, 1404), (6, 1104)],
    ),
    pytest.param(
        "4-aggregates/09-Find-the-total-revenue-of-each-facility.sql",
        ["name", "revenue"],
        [
            (b"Table Tennis", 180),
            (b"Snooker Table", 240),
            (b"Pool Table", 270),
            (b"Badminton Court", 1906.5),
            (b"Squash Court", 13468),
            (b"Tennis Court 1", 13860),
            (b"Tennis Court 2", 14310),
            (b"Massage Room 2", 15810),
            (b"Massage Room 1", 72540),
        ],
    ),
    pytest.param(
        "4-aggregates/10-Find-facilities-with-a-total-revenue-less-than-1000.sql",
        ["name", "revenue"],
        [(b"Table Tennis", 180), (b"Snooker Table", 240), (b"Pool Table", 270)],
    ),
    pytest.param(
        "4-aggregates/11-Output-the-facility-id-that-has-the-highest-number-of-slots-booked.sql",
        ["facid", "Total Slots"],
        [(4, 1404)],
    ),
    pytest.param(
        "4-aggregates/12-List-the-total-slots-booked-per-facility-per-month-part-2.sql",
        ["facid", "month", "slots"],
        [
            (0, 7, 270),
            (0, 8, 459),
            (0, 9, 591),
            (0, None, 1320),
            (1, 7, 207),
            (1, 8, 483),
            (1, 9, 588),
            (1, None, 1278),
            (2, 7, 180),
            (2, 8, 459),
            (2, 9, 570),
            (2, None, 1209),
            (3, 7, 104),
            (3, 8, 304),
            (3, 9, 422),
            (3, None, 830),
            (4, 7, 264),
            (4, 8, 492),
            (4, 9, 648),
            (4, None, 1404),
            (5, 7, 24),
            (5, 8, 82),
            (5, 9, 122),
            (5, None, 228),
            (6, 7, 164),
            (6, 8, 400),
            (6, 9, 540),
            (6, None, 1104),
            (7, 7, 156),
            (7, 8, 326),
            (7, 9, 426),
            (7, None, 908),
            (8, 7, 117),
            (8, 8, 322),
            (8, 9, 471),
            (8, None, 910),
            (None, None, 9191),
        ],
    ),
    pytest.param(
        "4-aggregates/13-List-the-total-hours-booked-per-named-facility.sql",
        ["facid", "name", "Total Hours"],
        [
            (0, b"Tennis Court 1", b"660.00"),
            (1, b"Tennis Court 2", b"639.00"),
            (2, b"Badminton Court", b"604.50"),
            (3, b"Table Tennis", b"415.00"),
            (4, b"Massage Room 1", b"702.00"),
            (5, b"Massage Room 2", b"114.00"),
            (6, b"Squash Court", b"552.00"),
            (7, b"Snooker Table", b"454.00"),
            (8, b"Pool Table", b"455.50"),
        ],
    ),
    pytest.param(
        "4-aggregates/14-List-each-members-first-booking-after-September-1st-2012.sql",
        ["surname", "firstname", "memid", "starttime"],
        [
            (b"GUEST", b"GUEST", 0, datetime_iso("2012-09-01 08:00:00")),
            (b"Smith", b"Darren", 1, datetime_iso("2012-09-01 09:00:00")),
            (b"Smith", b"Tracy", 2, datetime_iso("2012-09-01 11:30:00")),
            (b"Rownam", b"Tim", 3, datetime_iso("2012-09-01 16:00:00")),
            (b"Joplette", b"Janice", 4, datetime_iso("2012-09-01 15:00:00")),
            (b"Butters", b"Gerald", 5, datetime_iso("2012-09-02 12:30:00")),
            (b"Tracy", b"Burton", 6, datetime_iso("2012-09-01 15:00:00")),
            (b"Dare", b"Nancy", 7, datetime_iso("2012-09-01 12:30:00")),
            (b"Boothe", b"Tim", 8, datetime_iso("2012-09-01 08:30:00")),
            (b"Stibbons", b"Ponder", 9, datetime_iso("2012-09-01 11:00:00")),
            (b"Owen", b"Charles", 10, datetime_iso("2012-09-01 11:00:00")),
            (b"Jones", b"David", 11, datetime_iso("2012-09-01 09:30:00")),
            (b"Baker", b"Anne", 12, datetime_iso("2012-09-01 14:30:00")),
            (b"Farrell", b"Jemima", 13, datetime_iso("2012-09-01 09:30:00")),
            (b"Smith", b"Jack", 14, datetime_iso("2012-09-01 11:00:00")),
            (b"Bader", b"Florence", 15, datetime_iso("2012-09-01 10:30:00")),
            (b"Baker", b"Timothy", 16, datetime_iso("2012-09-01 15:00:00")),
            (b"Pinker", b"David", 17, datetime_iso("2012-09-01 08:30:00")),
            (b"Genting", b"Matthew", 20, datetime_iso("2012-09-01 18:00:00")),
            (b"Mackenzie", b"Anna", 21, datetime_iso("2012-09-01 08:30:00")),
            (b"Coplin", b"Joan", 22, datetime_iso("2012-09-02 11:30:00")),
            (b"Sarwin", b"Ramnaresh", 24, datetime_iso("2012-09-04 11:00:00")),
            (b"Jones", b"Douglas", 26, datetime_iso("2012-09-08 13:00:00")),
            (b"Rumney", b"Henrietta", 27, datetime_iso("2012-09-16 13:30:00")),
            (b"Farrell", b"David", 28, datetime_iso("2012-09-18 09:00:00")),
            (b"Worthington-Smyth", b"Henry", 29, datetime_iso("2012-09-19 09:30:00")),
            (b"Purview", b"Millicent", 30, datetime_iso("2012-09-19 11:30:00")),
            (b"Tupperware", b"Hyacinth", 33, datetime_iso("2012-09-20 08:00:00")),
            (b"Hunt", b"John", 35, datetime_iso("2012-09-23 14:00:00")),
            (b"Crumpet", b"Erica", 36, datetime_iso("2012-09-27 11:30:00")),
        ],
    ),
    pytest.param(
        "4-aggregates/15-Produce-a-list-of-member-names-with-each-row-containing-the-total-member-count.sql",
        ["count", "firstname", "surname"],
        [
            (31, b"GUEST", b"GUEST"),
            (31, b"Darren", b"Smith"),
            (31, b"Tracy", b"Smith"),
            (31, b"Tim", b"Rownam"),
            (31, b"Janice", b"Joplette"),
            (31, b"Gerald", b"Butters"),
            (31, b"Burton", b"Tracy"),
            (31, b"Nancy", b"Dare"),
            (31, b"Tim", b"Boothe"),
            (31, b"Ponder", b"Stibbons"),
            (31, b"Charles", b"Owen"),
            (31, b"David", b"Jones"),
            (31, b"Anne", b"Baker"),
            (31, b"Jemima", b"Farrell"),
            (31, b"Jack", b"Smith"),
            (31, b"Florence", b"Bader"),
            (31, b"Timothy", b"Baker"),
            (31, b"David", b"Pinker"),
            (31, b"Matthew", b"Genting"),
            (31, b"Anna", b"Mackenzie"),
            (31, b"Joan", b"Coplin"),
            (31, b"Ramnaresh", b"Sarwin"),
            (31, b"Douglas", b"Jones"),
            (31, b"Henrietta", b"Rumney"),
            (31, b"David", b"Farrell"),
            (31, b"Henry", b"Worthington-Smyth"),
            (31, b"Millicent", b"Purview"),
            (31, b"Hyacinth", b"Tupperware"),
            (31, b"John", b"Hunt"),
            (31, b"Erica", b"Crumpet"),
            (31, b"Darren", b"Smith"),
        ],
    ),
    pytest.param(
        "4-aggregates/16-Produce-a-numbered-list-of-members.sql",
        ["row_number", "firstname", "surname"],
        [
            (1, b"GUEST", b"GUEST"),
            (2, b"Darren", b"Smith"),
            (3, b"Tracy", b"Smith"),
            (4, b"Tim", b"Rownam"),
            (5, b"Janice", b"Joplette"),
            (6, b"Gerald", b"Butters"),
            (7, b"Burton", b"Tracy"),
            (8, b"Nancy", b"Dare"),
            (9, b"Tim", b"Boothe"),
            (10, b"Ponder", b"Stibbons"),
            (11, b"Charles", b"Owen"),
            (12, b"David", b"Jones"),
            (13, b"Anne", b"Baker"),
            (14, b"Jemima", b"Farrell"),
            (15, b"Jack", b"Smith"),
            (16, b"Florence", b"Bader"),
            (17, b"Timothy", b"Baker"),
            (18, b"David", b"Pinker"),
            (19, b"Matthew", b"Genting"),
            (20, b"Anna", b"Mackenzie"),
            (21, b"Joan", b"Coplin"),
            (22, b"Ramnaresh", b"Sarwin"),
            (23, b"Douglas", b"Jones"),
            (24, b"Henrietta", b"Rumney"),
            (25, b"David", b"Farrell"),
            (26, b"Henry", b"Worthington-Smyth"),
            (27, b"Millicent", b"Purview"),
            (28, b"Hyacinth", b"Tupperware"),
            (29, b"John", b"Hunt"),
            (30, b"Erica", b"Crumpet"),
            (31, b"Darren", b"Smith"),
        ],
    ),
    pytest.param(
        "4-aggregates/17-Output-the-facility-id-that-has-the-highest-number-of-slots-booked-again.sql",
        ["facid", "total"],
        [(4, 1404)],
    ),
    pytest.param(
        "4-aggregates/18-Rank-members-by-(rounded)-hours-used.sql",
        ["firstname", "surname", "hours", "rank"],
        [
            (b"GUEST", b"GUEST", 1200, 1),
            (b"Darren", b"Smith", 340, 2),
            (b"Tim", b"Rownam", 330, 3),
            (b"Tim", b"Boothe", 220, 4),
            (b"Tracy", b"Smith", 220, 4),
            (b"Gerald", b"Butters", 210, 6),
            (b"Burton", b"Tracy", 180, 7),
            (b"Charles", b"Owen", 170, 8),
            (b"Janice", b"Joplette", 160, 9),
            (b"Anne", b"Baker", 150, 10),
            (b"Timothy", b"Baker", 150, 10),
            (b"David", b"Jones", 150, 10),
            (b"Nancy", b"Dare", 130, 13),
            (b"Florence", b"Bader", 120, 14),
            (b"Anna", b"Mackenzie", 120, 14),
            (b"Ponder", b"Stibbons", 120, 14),
            (b"Jack", b"Smith", 110, 17),
            (b"Jemima", b"Farrell", 90, 18),
            (b"David", b"Pinker", 80, 19),
            (b"Ramnaresh", b"Sarwin", 80, 19),
            (b"Matthew", b"Genting", 70, 21),
            (b"Joan", b"Coplin", 50, 22),
            (b"David", b"Farrell", 30, 23),
            (b"Henry", b"Worthington-Smyth", 30, 23),
            (b"John", b"Hunt", 20, 25),
            (b"Douglas", b"Jones", 20, 25),
            (b"Millicent", b"Purview", 20, 25),
            (b"Henrietta", b"Rumney", 20, 25),
            (b"Erica", b"Crumpet", 10, 29),
            (b"Hyacinth", b"Tupperware", 10, 29),
        ],
    ),
    pytest.param(
        "4-aggregates/19-Find-the-top-three-revenue-generating-facilities.sql",
        ["name", "rank"],
        [(b"Massage Room 1", 1), (b"Massage Room 2", 2), (b"Tennis Court 2", 3)],
    ),
    pytest.param(
        "4-aggregates/20-Classify-facilities-by-value.sql",
        ["name", "revenue"],
        [
            (b"Massage Room 1", b"high"),
            (b"Massage Room 2", b"high"),
            (b"Tennis Court 2", b"high"),
            (b"Badminton Court", b"average"),
            (b"Squash Court", b"average"),
            (b"Tennis Court 1", b"average"),
            (b"Pool Table", b"low"),
            (b"Snooker Table", b"low"),
            (b"Table Tennis", b"low"),
        ],
    ),
    pytest.param(
        "4-aggregates/21-Calculate-the-payback-time-for-each-facility.sql",
        ["name", "months"],
        [
            (b"Badminton Court", Decimal("6.8317677198975235")),
            (b"Massage Room 1", Decimal("0.18885741265344664778")),
            (b"Massage Room 2", Decimal("1.7621145374449339")),
            (b"Pool Table", Decimal("5.3333333333333333")),
            (b"Snooker Table", Decimal("6.9230769230769231")),
            (b"Squash Court", Decimal("1.1339582703356516")),
            (b"Table Tennis", Decimal("6.4000000000000000")),
            (b"Tennis Court 1", Decimal("2.2624434389140271")),
            (b"Tennis Court 2", Decimal("1.7505470459518600")),
        ],
    ),
    pytest.param(
        "4-aggregates/22-Calculate-a-rolling-average-of-total-revenue.sql",
        ["date", "revenue"],
        [
            (date_iso("2012-08-01"), Decimal("1126.8333333333333333")),
            (date_iso("2012-08-02"), Decimal("1153.0000000000000000")),
            (date_iso("2012-08-03"), Decimal("1162.9000000000000000")),
            (date_iso("2012-08-04"), Decimal("1177.3666666666666667")),
            (date_iso("2012-08-05"), Decimal("1160.9333333333333333")),
            (date_iso("2012-08-06"), Decimal("1185.4000000000000000")),
            (date_iso("2012-08-07"), Decimal("1182.8666666666666667")),
            (date_iso("2012-08-08"), Decimal("1172.6000000000000000")),
            (date_iso("2012-08-09"), Decimal("1152.4666666666666667")),
            (date_iso("2012-08-10"), Decimal("1175.0333333333333333")),
            (date_iso("2012-08-11"), Decimal("1176.6333333333333333")),
            (date_iso("2012-08-12"), Decimal("1195.6666666666666667")),
            (date_iso("2012-08-13"), Decimal("1218.0000000000000000")),
            (date_iso("2012-08-14"), Decimal("1247.4666666666666667")),
            (date_iso("2012-08-15"), Decimal("1274.1000000000000000")),
            (date_iso("2012-08-16"), Decimal("1281.2333333333333333")),
            (date_iso("2012-08-17"), Decimal("1324.4666666666666667")),
            (date_iso("2012-08-18"), Decimal("1373.7333333333333333")),
            (date_iso("2012-08-19"), Decimal("1406.0666666666666667")),
            (date_iso("2012-08-20"), Decimal("1427.0666666666666667")),
            (date_iso("2012-08-21"), Decimal("1450.3333333333333333")),
            (date_iso("2012-08-22"), Decimal("1539.7000000000000000")),
            (date_iso("2012-08-23"), Decimal("1567.3000000000000000")),
            (date_iso("2012-08-24"), Decimal("1592.3333333333333333")),
            (date_iso("2012-08-25"), Decimal("1615.0333333333333333")),
            (date_iso("2012-08-26"), Decimal("1631.2000000000000000")),
            (date_iso("2012-08-27"), Decimal("1659.4333333333333333")),
            (date_iso("2012-08-28"), Decimal("1687.0000000000000000")),
            (date_iso("2012-08-29"), Decimal("1684.6333333333333333")),
            (date_iso("2012-08-30"), Decimal("1657.9333333333333333")),
            (date_iso("2012-08-31"), Decimal("1703.4000000000000000")),
        ],
    ),
    pytest.param(
        "5-date/01-Produce-a-timestamp-for-1-a-m-on-the-31st-of-August-2012.sql",
        ["timestamp"],
        [(datetime_iso("2012-08-31 01:00:00"),)],
    ),
    pytest.param(
        "5-date/02-Subtract-timestamps-from-each-other.sql",
        ["interval"],
        [(datetime.timedelta(days=32),)],
    ),
    pytest.param(
        "5-date/03-Generate-a-list-of-all-the-dates-in-October-2012.sql",
        ["ts"],
        [
            (datetime_iso("2012-10-01 00:00:00"),),
            (datetime_iso("2012-10-02 00:00:00"),),
            (datetime_iso("2012-10-03 00:00:00"),),
            (datetime_iso("2012-10-04 00:00:00"),),
            (datetime_iso("2012-10-05 00:00:00"),),
            (datetime_iso("2012-10-06 00:00:00"),),
            (datetime_iso("2012-10-07 00:00:00"),),
            (datetime_iso("2012-10-08 00:00:00"),),
            (datetime_iso("2012-10-09 00:00:00"),),
            (datetime_iso("2012-10-10 00:00:00"),),
            (datetime_iso("2012-10-11 00:00:00"),),
            (datetime_iso("2012-10-12 00:00:00"),),
            (datetime_iso("2012-10-13 00:00:00"),),
            (datetime_iso("2012-10-14 00:00:00"),),
            (datetime_iso("2012-10-15 00:00:00"),),
            (datetime_iso("2012-10-16 00:00:00"),),
            (datetime_iso("2012-10-17 00:00:00"),),
            (datetime_iso("2012-10-18 00:00:00"),),
            (datetime_iso("2012-10-19 00:00:00"),),
            (datetime_iso("2012-10-20 00:00:00"),),
            (datetime_iso("2012-10-21 00:00:00"),),
            (datetime_iso("2012-10-22 00:00:00"),),
            (datetime_iso("2012-10-23 00:00:00"),),
            (datetime_iso("2012-10-24 00:00:00"),),
            (datetime_iso("2012-10-25 00:00:00"),),
            (datetime_iso("2012-10-26 00:00:00"),),
            (datetime_iso("2012-10-27 00:00:00"),),
            (datetime_iso("2012-10-28 00:00:00"),),
            (datetime_iso("2012-10-29 00:00:00"),),
            (datetime_iso("2012-10-30 00:00:00"),),
            (datetime_iso("2012-10-31 00:00:00"),),
        ],
    ),
    pytest.param(
        "5-date/04-Get-the-day-of-the-month-from-a-timestamp.sql",
        ["date_part"],
        [(31,)],
    ),
    pytest.param(
        "5-date/05-Work-out-the-number-of-seconds-between-timestamps.sql",
        ["date_part"],
        [(169200,)],
    ),
    pytest.param(
        "5-date/06-Work-out-the-number-of-days-in-each-month-of-2012.sql",
        ["month", "length"],
        [
            (1, datetime.timedelta(days=31)),
            (2, datetime.timedelta(days=29)),
            (3, datetime.timedelta(days=31)),
            (4, datetime.timedelta(days=30)),
            (5, datetime.timedelta(days=31)),
            (6, datetime.timedelta(days=30)),
            (7, datetime.timedelta(days=31)),
            (8, datetime.timedelta(days=31)),
            (9, datetime.timedelta(days=30)),
            (10, datetime.timedelta(days=31)),
            (11, datetime.timedelta(days=30)),
            (12, datetime.timedelta(days=31)),
        ],
    ),
    pytest.param(
        "5-date/07-Work-out-the-number-of-days-remaining-in-the-month.sql",
        ["remaining"],
        [(datetime.timedelta(days=19),)],
    ),
    pytest.param(
        "5-date/08-Work-out-the-end-time-of-bookings.sql",
        ["starttime", "endtime"],
        [
            (datetime_iso("2013-01-01 15:30:00"), datetime_iso("2013-01-01 16:00:00")),
            (datetime_iso("2012-09-30 19:30:00"), datetime_iso("2012-09-30 20:30:00")),
            (datetime_iso("2012-09-30 19:00:00"), datetime_iso("2012-09-30 20:30:00")),
            (datetime_iso("2012-09-30 19:30:00"), datetime_iso("2012-09-30 20:00:00")),
            (datetime_iso("2012-09-30 19:00:00"), datetime_iso("2012-09-30 20:00:00")),
            (datetime_iso("2012-09-30 19:00:00"), datetime_iso("2012-09-30 20:00:00")),
            (datetime_iso("2012-09-30 18:30:00"), datetime_iso("2012-09-30 20:00:00")),
            (datetime_iso("2012-09-30 18:30:00"), datetime_iso("2012-09-30 20:00:00")),
            (datetime_iso("2012-09-30 19:00:00"), datetime_iso("2012-09-30 19:30:00")),
            (datetime_iso("2012-09-30 18:30:00"), datetime_iso("2012-09-30 19:30:00")),
        ],
    ),
    pytest.param(
        "5-date/09-Return-a-count-of-bookings-for-each-month.sql",
        ["month", "count"],
        [
            (datetime_iso("2012-07-01 00:00:00"), 658),
            (datetime_iso("2012-08-01 00:00:00"), 1472),
            (datetime_iso("2012-09-01 00:00:00"), 1913),
            (datetime_iso("2013-01-01 00:00:00"), 1),
        ],
    ),
    pytest.param(
        "5-date/10-Work-out-the-utilisation-percentage-for-each-facility-by-month.sql",
        ["name", "month", "utilisation"],
        [
            (b"Badminton Court", datetime_iso("2012-07-01 00:00:00"), Decimal("23.2")),
            (b"Badminton Court", datetime_iso("2012-08-01 00:00:00"), Decimal("59.2")),
            (b"Badminton Court", datetime_iso("2012-09-01 00:00:00"), Decimal("76.0")),
            (b"Massage Room 1", datetime_iso("2012-07-01 00:00:00"), Decimal("34.1")),
            (b"Massage Room 1", datetime_iso("2012-08-01 00:00:00"), Decimal("63.5")),
            (b"Massage Room 1", datetime_iso("2012-09-01 00:00:00"), Decimal("86.4")),
            (b"Massage Room 2", datetime_iso("2012-07-01 00:00:00"), Decimal("3.1")),
            (b"Massage Room 2", datetime_iso("2012-08-01 00:00:00"), Decimal("10.6")),
            (b"Massage Room 2", datetime_iso("2012-09-01 00:00:00"), Decimal("16.3")),
            (b"Pool Table", datetime_iso("2012-07-01 00:00:00"), Decimal("15.1")),
            (b"Pool Table", datetime_iso("2012-08-01 00:00:00"), Decimal("41.5")),
            (b"Pool Table", datetime_iso("2012-09-01 00:00:00"), Decimal("62.8")),
            (b"Pool Table", datetime_iso("2013-01-01 00:00:00"), Decimal("0.1")),
            (b"Snooker Table", datetime_iso("2012-07-01 00:00:00"), Decimal("20.1")),
            (b"Snooker Table", datetime_iso("2012-08-01 00:00:00"), Decimal("42.1")),
            (b"Snooker Table", datetime_iso("2012-09-01 00:00:00"), Decimal("56.8")),
            (b"Squash Court", datetime_iso("2012-07-01 00:00:00"), Decimal("21.2")),
            (b"Squash Court", datetime_iso("2012-08-01 00:00:00"), Decimal("51.6")),
            (b"Squash Court", datetime_iso("2012-09-01 00:00:00"), Decimal("72.0")),
            (b"Table Tennis", datetime_iso("2012-07-01 00:00:00"), Decimal("13.4")),
            (b"Table Tennis", datetime_iso("2012-08-01 00:00:00"), Decimal("39.2")),
            (b"Table Tennis", datetime_iso("2012-09-01 00:00:00"), Decimal("56.3")),
            (b"Tennis Court 1", datetime_iso("2012-07-01 00:00:00"), Decimal("34.8")),
            (b"Tennis Court 1", datetime_iso("2012-08-01 00:00:00"), Decimal("59.2")),
            (b"Tennis Court 1", datetime_iso("2012-09-01 00:00:00"), Decimal("78.8")),
            (b"Tennis Court 2", datetime_iso("2012-07-01 00:00:00"), Decimal("26.7")),
            (b"Tennis Court 2", datetime_iso("2012-08-01 00:00:00"), Decimal("62.3")),
            (b"Tennis Court 2", datetime_iso("2012-09-01 00:00:00"), Decimal("78.4")),
        ],
    ),
    pytest.param(
        "6-string/1-Format-the-names-of-members.sql",
        ["name"],
        [
            (b"GUEST, GUEST",),
            (b"Smith, Darren",),
            (b"Smith, Tracy",),
            (b"Rownam, Tim",),
            (b"Joplette, Janice",),
            (b"Butters, Gerald",),
            (b"Tracy, Burton",),
            (b"Dare, Nancy",),
            (b"Boothe, Tim",),
            (b"Stibbons, Ponder",),
            (b"Owen, Charles",),
            (b"Jones, David",),
            (b"Baker, Anne",),
            (b"Farrell, Jemima",),
            (b"Smith, Jack",),
            (b"Bader, Florence",),
            (b"Baker, Timothy",),
            (b"Pinker, David",),
            (b"Genting, Matthew",),
            (b"Mackenzie, Anna",),
            (b"Coplin, Joan",),
            (b"Sarwin, Ramnaresh",),
            (b"Jones, Douglas",),
            (b"Rumney, Henrietta",),
            (b"Farrell, David",),
            (b"Worthington-Smyth, Henry",),
            (b"Purview, Millicent",),
            (b"Tupperware, Hyacinth",),
            (b"Hunt, John",),
            (b"Crumpet, Erica",),
            (b"Smith, Darren",),
        ],
    ),
    pytest.param(
        "6-string/2-Find-facilities-by-a-name-prefix.sql",
        ["facid", "name", "membercost", "guestcost", "initialoutlay", "monthlymaintenance"],
        [
            (0, b"Tennis Court 1", 5, 25, 10000, 200),
            (1, b"Tennis Court 2", 5, 25, 8000, 200),
        ],
    ),
    pytest.param(
        "6-string/3-Perform-a-case-insensitive-search.sql",
        ["facid", "name", "membercost", "guestcost", "initialoutlay", "monthlymaintenance"],
        [
            (0, b"Tennis Court 1", 5, 25, 10000, 200),
            (1, b"Tennis Court 2", 5, 25, 8000, 200),
        ],
    ),
    pytest.param(
        "6-string/4-Find-telephone-numbers-with-parentheses.sql",
        ["memid", "telephone"],
        [
            (0, b"(000) 000-0000"),
            (3, b"(844) 693-0723"),
            (4, b"(833) 942-4710"),
            (5, b"(844) 078-4130"),
            (6, b"(822) 354-9973"),
            (7, b"(833) 776-4001"),
            (8, b"(811) 433-2547"),
            (9, b"(833) 160-3900"),
            (10, b"(855) 542-5251"),
            (11, b"(844) 536-8036"),
            (13, b"(855) 016-0163"),
            (14, b"(822) 163-3254"),
            (15, b"(833) 499-3527"),
            (20, b"(811) 972-1377"),
            (21, b"(822) 661-2898"),
            (22, b"(822) 499-2232"),
            (24, b"(822) 413-1470"),
            (27, b"(822) 989-8876"),
            (28, b"(855) 755-9876"),
            (29, b"(855) 894-3758"),
            (30, b"(855) 941-9786"),
            (33, b"(822) 665-5327"),
            (35, b"(899) 720-6978"),
            (36, b"(811) 732-4816"),
            (37, b"(822) 577-3541"),
        ],
    ),
    pytest.param(
        "6-string/5-Pad-zip-codes-with-leading-zeroes.sql",
        ["zip"],
        [
            (b"00000",),
            (b"00234",),
            (b"00234",),
            (b"04321",),
            (b"04321",),
            (b"10383",),
            (b"11986",),
            (b"23423",),
            (b"28563",),
            (b"33862",),
            (b"34232",),
            (b"43532",),
            (b"43533",),
            (b"45678",),
            (b"52365",),
            (b"54333",),
            (b"56754",),
            (b"57392",),
            (b"58393",),
            (b"64577",),
            (b"65332",),
            (b"65464",),
            (b"66796",),
            (b"68666",),
            (b"69302",),
            (b"75655",),
            (b"78533",),
            (b"80743",),
            (b"84923",),
            (b"87630",),
            (b"97676",),
        ],
    ),
    pytest.param(
        "6-string/6-Count-the-number-of-members-whose-surname-starts-with-each-letter-of-the-alphabet.sql",
        ["letter", "count"],
        [
            (b"B", 5),
            (b"C", 2),
            (b"D", 1),
            (b"F", 2),
            (b"G", 2),
            (b"H", 1),
            (b"J", 3),
            (b"M", 1),
            (b"O", 1),
            (b"P", 2),
            (b"R", 2),
            (b"S", 6),
            (b"T", 2),
            (b"W", 1),
        ],
    ),
    pytest.param(
        "6-string/7-Clean-up-telephone-numbers.sql",
        ["memid", "telephone"],
        [
            (0, b"0000000000"),
            (1, b"5555555555"),
            (2, b"5555555555"),
            (3, b"8446930723"),
            (4, b"8339424710"),
            (5, b"8440784130"),
            (6, b"8223549973"),
            (7, b"8337764001"),
            (8, b"8114332547"),
            (9, b"8331603900"),
            (10, b"8555425251"),
            (11, b"8445368036"),
            (12, b"8440765141"),
            (13, b"8550160163"),
            (14, b"8221633254"),
            (15, b"8334993527"),
            (16, b"8339410824"),
            (17, b"8114096734"),
            (20, b"8119721377"),
            (21, b"8226612898"),
            (22, b"8224992232"),
            (24, b"8224131470"),
            (26, b"8445368036"),
            (27, b"8229898876"),
            (28, b"8557559876"),
            (29, b"8558943758"),
            (30, b"8559419786"),
            (33, b"8226655327"),
            (35, b"8997206978"),
            (36, b"8117324816"),
            (37, b"8225773541"),
        ],
    ),
    pytest.param(
        "7-recursive/1-Find-the-upward-recommendation-chain-for-member-ID-27.sql",
        ["recommender", "firstname", "surname"],
        [
            (20, b"Matthew", b"Genting"),
            (5, b"Gerald", b"Butters"),
            (1, b"Darren", b"Smith"),
        ],
    ),
    pytest.param(
        "7-recursive/2-Find-the-downward-recommendation-chain-for-member-ID-1.sql",
        ["memid", "firstname", "surname"],
        [
            (4, b"Janice", b"Joplette"),
            (5, b"Gerald", b"Butters"),
            (7, b"Nancy", b"Dare"),
            (10, b"Charles", b"Owen"),
            (11, b"David", b"Jones"),
            (14, b"Jack", b"Smith"),
            (20, b"Matthew", b"Genting"),
            (21, b"Anna", b"Mackenzie"),
            (26, b"Douglas", b"Jones"),
            (27, b"Henrietta", b"Rumney"),
        ],
    ),
    pytest.param(
        "7-recursive/3-Produce-a-CTE-that-can-return-the-upward-recommendation-chain-for-any-member.sql",
        ["member", "recommender", "firstname", "surname"],
        [
            (12, 9, b"Ponder", b"Stibbons"),
            (12, 6, b"Burton", b"Tracy"),
            (22, 16, b"Timothy", b"Baker"),
            (22, 13, b"Jemima", b"Farrell"),
        ],
    ),
]


@pytest.fixture(scope="module")
def db_cursor():
    try:
        with psycopg.connect("host=localhost dbname=exercises user=postgres") as conn:
            with conn.cursor() as cur:
                yield cur

        # automatic teardown

    except psycopg.OperationalError:
        pytest.exit("cannot reach database")


@pytest.mark.parametrize(
    "query_path, columns, values",
    test_parameters,
    ids=(p.values[0] for p in test_parameters),
)
def test_query(db_cursor, query_path, columns, values):
    with open(f"solutions/{query_path}") as f:
        query = f.read()

    db_cursor.execute(query)

    assert [column_name for column_name, *_ in db_cursor.description] == columns
    assert db_cursor.fetchall() == values
